#######################################################
# 
# Rombus.py
# Python implementation of the Class Rombus
# Generated by Enterprise Architect
# Created on:      15-Mar-2021 12:48:51 AM
# Original author: User
# 
#######################################################

from PyQt5.QtGui import QPen, QBrush

from utils import distance, mbr, Point
from shapes.Shape import Shape


class Rhombus(Shape):
    @staticmethod
    def name():
        return 'Rhombus'

    def __init__(self, points, brd_color, bg_color):
        points = [Point(*p) for p in mbr(points)]
        self._width = (points[1].x() - points[0].x()) / 2
        self._height = (points[1].y() - points[0].y()) / 2
        self.location = Point(points[0].x() + self._width,
                              points[0].y() + self._height)
        super(Rhombus, self).__init__(points, brd_color, bg_color)

    def draw(self, painter):
        painter.setPen(self.get_pen())
        painter.setBrush(QBrush(self.bg_color))
        p = self.points[0]
        np1 = Point(p.x() + self._width, p.y())
        np2 = Point(p.x() + 2 * self._width, p.y() + self._height)
        np3 = Point(p.x() + self._width, p.y() + 2 * self._height)
        np4 = Point(p.x(), p.y() + self._height)
        painter.drawPolygon(np1, np2, np3, np4)
